@page "/Registrodireccion"
@page "/Registrodireccion/{id:int?}"

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Proyecto_Final.Data
@using Proyecto_Final.Models.Usuario
@inject NavigationManager NavManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<RegistroDireccion> Logger

@attribute [Authorize]

<PageTitle>@title - Golazo Store</PageTitle>

<div class="container mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">@title</h1>
    <p class="text-center text-gray-600 mb-10">
        @if (id.HasValue)
        {
            <span>Edita tu dirección de envío existente.</span>
        }
        else
        {
            <span>Añade una nueva dirección de envío para tus compras.</span>
        }
    </p>

    <div class="max-w-3xl mx-auto bg-white p-8 rounded-xl shadow-md border border-gray-200">
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                <strong class="font-bold">¡Éxito!</strong>
                <span class="block sm:inline">@statusMessage</span>
            </div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                <strong class="font-bold">Error:</strong>
                <span class="block sm:inline">@errorMessage</span>
            </div>
        }

        @if (direccionToEdit == null && id.HasValue)
        {
            <div class="text-center py-8">
                <p class="text-gray-500">Cargando dirección...</p>
            </div>
        }
        else
        {
            <EditForm Model="direccionToEdit" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre *</label>
                            <InputText id="nombre" @bind-Value="direccionToEdit.Nombre" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" placeholder="Ej. Juan" />
                            <ValidationMessage For="@(() => direccionToEdit.Nombre)" class="text-red-500 text-sm mt-1" />
                        </div>
                        <div>
                            <label for="apellido" class="block text-sm font-medium text-gray-700 mb-1">Apellido *</label>
                            <InputText id="apellido" @bind-Value="direccionToEdit.Apellido" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" placeholder="Ej. Pérez" />
                            <ValidationMessage For="@(() => direccionToEdit.Apellido)" class="text-red-500 text-sm mt-1" />
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="telefono" class="block text-sm font-medium text-gray-700 mb-1">Teléfono *</label>
                            <InputText id="telefono" @bind-Value="direccionToEdit.Telefono" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" placeholder="Ej. 809-123-4567" />
                            <ValidationMessage For="@(() => direccionToEdit.Telefono)" class="text-red-500 text-sm mt-1" />
                        </div>
                        <div>
                            <label for="calle" class="block text-sm font-medium text-gray-700 mb-1">Calle *</label>
                            <InputText id="calle" @bind-Value="direccionToEdit.Calle" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" placeholder="Ej. Calle Principal #123" />
                            <ValidationMessage For="@(() => direccionToEdit.Calle)" class="text-red-500 text-sm mt-1" />
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <label for="ciudad" class="block text-sm font-medium text-gray-700 mb-1">Ciudad *</label>
                            <InputText id="ciudad" @bind-Value="direccionToEdit.Ciudad" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" placeholder="Ej. Santiago de los Caballeros" />
                            <ValidationMessage For="@(() => direccionToEdit.Ciudad)" class="text-red-500 text-sm mt-1" />
                        </div>
                        <div>
                            <label for="estado" class="block text-sm font-medium text-gray-700 mb-1">Provincia *</label>
                            <InputSelect id="estado" @bind-Value="direccionToEdit.Estado" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500">
                                <option value="">Selecciona una provincia</option>
                                @foreach (var provincia in provinciasRD)
                                {
                                    <option value="@provincia">@provincia</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => direccionToEdit.Estado)" class="text-red-500 text-sm mt-1" />
                        </div>
                        <div>
                            <label for="codigoPostal" class="block text-sm font-medium text-gray-700 mb-1">Código Postal *</label>
                            <InputText id="codigoPostal" @bind-Value="direccionToEdit.CodigoPostal" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" placeholder="Ej. 51000" />
                            <ValidationMessage For="@(() => direccionToEdit.CodigoPostal)" class="text-red-500 text-sm mt-1" />
                        </div>
                    </div>

                    <div>
                        <label for="pais" class="block text-sm font-medium text-gray-700 mb-1">País *</label>
                        <InputSelect id="pais" @bind-Value="direccionToEdit.Pais" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500">
                            <option value="República Dominicana">República Dominicana</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => direccionToEdit.Pais)" class="text-red-500 text-sm mt-1" />
                    </div>

                    <div class="flex items-center">
                        <InputCheckbox id="esPrincipal" @bind-Value="direccionToEdit.EsPrincipal" class="h-4 w-4 rounded border-gray-300 text-yellow-600 focus:ring-yellow-500" />
                        <label for="esPrincipal" class="ml-2 block text-sm text-gray-900">
                            Establecer como dirección principal
                        </label>
                    </div>
                </div>

                <div class="flex justify-between items-center mt-8">
                    <button type="button" @onclick="NavigateToProfile" class="text-blue-600 hover:underline">
                        &larr; Volver a mi perfil
                    </button>
                    <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-3 px-8 rounded-lg transition-colors duration-300">
                        @buttonText
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int? id { get; set; }

    private DireccionEnvio direccionToEdit = new DireccionEnvio();
    private string title = "Añadir nueva dirección";
    private string buttonText = "Guardar";
    private string statusMessage;
    private string errorMessage;

    private readonly List<string> provinciasRD = new List<string>
    {
        "Azua", "Bahoruco", "Barahona", "Dajabón", "Distrito Nacional",
        "Duarte", "Elías Piña", "El Seibo", "Espaillat", "Hato Mayor",
        "Hermanas Mirabal", "Independencia", "La Altagracia", "La Romana",
        "La Vega", "María Trinidad Sánchez", "Monseñor Nouel", "Monte Cristi",
        "Monte Plata", "Pedernales", "Peravia", "Puerto Plata", "Samaná",
        "Sánchez Ramírez", "San Cristóbal", "San José de Ocoa", "San Juan",
        "San Pedro de Macorís", "Santiago", "Santiago Rodríguez", "Santo Domingo",
        "Valverde"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "No se pudo identificar al usuario. Por favor, inicia sesión de nuevo.";
                return;
            }

            if (id.HasValue)
            {
                direccionToEdit = await DbContext.DireccionesEnvio
                    .Where(d => d.Id == id.Value && d.UsuarioId == userId)
                    .FirstOrDefaultAsync();

                if (direccionToEdit == null)
                {
                    errorMessage = "Dirección no encontrada o no tienes permiso para editarla.";
                    NavManager.NavigateTo("/perfil");
                    return;
                }
                title = "Editar dirección";
                buttonText = "Actualizar";
            }
            else
            {
                direccionToEdit = new DireccionEnvio
                {
                    UsuarioId = userId,
                    Pais = "República Dominicana"
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al cargar la página.";
            Logger.LogError(ex, "Error al cargar la página de registro de dirección");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (direccionToEdit.EsPrincipal)
            {
                var otrasDirecciones = await DbContext.DireccionesEnvio
                    .Where(d => d.UsuarioId == direccionToEdit.UsuarioId && d.Id != direccionToEdit.Id && d.EsPrincipal)
                    .ToListAsync();

                foreach (var d in otrasDirecciones)
                {
                    d.EsPrincipal = false;
                }
            }

            if (direccionToEdit.Id == 0)
            {
                DbContext.DireccionesEnvio.Add(direccionToEdit);
                await DbContext.SaveChangesAsync();
                statusMessage = "¡Dirección guardada con éxito!";
            }
            else
            {
                DbContext.DireccionesEnvio.Update(direccionToEdit);
                await DbContext.SaveChangesAsync();
                statusMessage = "¡Dirección actualizada con éxito!";
            }

            await Task.Delay(1500);
            NavManager.NavigateTo("/perfil");
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al guardar la dirección. Por favor, intenta de nuevo.";
            Logger.LogError(ex, "Error al guardar la dirección");
        }
    }

    private void NavigateToProfile()
    {
        NavManager.NavigateTo("/perfil");
    }
}