@page "/admin/productos"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Proyecto_Final.Data
@using Proyecto_Final.Models.Producto
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Hosting
@using System.IO
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject ILogger<AdminProductos> Logger
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Administrar Productos - Golazo Store</PageTitle>

<div class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold text-center mb-8 text-gray-800">Administración de Productos</h1>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Éxito:</strong>
            <span class="block sm:inline">@successMessage</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@errorMessage</span>
        </div>
    }

    <div class="max-w-4xl mx-auto bg-white p-8 rounded-xl shadow-lg border border-gray-200">
        <h2 class="text-2xl font-bold mb-6 text-gray-800">Crear Nuevo Producto</h2>

        <EditForm Model="NuevoProducto" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre del Producto *</label>
                    <InputText id="nombre" @bind-Value="NuevoProducto.Nombre" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500" />
                    <ValidationMessage For="() => NuevoProducto.Nombre" class="text-red-500 text-sm" />
                </div>
                <div>
                    <label for="categoria" class="block text-sm font-medium text-gray-700 mb-1">Categoría *</label>
                    <InputSelect id="categoria" @bind-Value:get="NuevoProducto.Categoria" @bind-Value:set="OnCategoriaChanged" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500">
                        <option value="">Selecciona una categoría</option>
                        <option value="Camisetas">Camisetas</option>
                        <option value="Botines">Botines</option>
                        <option value="Guantes">Guantes</option>
                        <option value="Accesorios">Accesorios</option>
                    </InputSelect>
                    <ValidationMessage For="() => NuevoProducto.Categoria" class="text-red-500 text-sm" />
                </div>
            </div>

            <div class="mb-6">
                <label for="descripcion" class="block text-sm font-medium text-gray-700 mb-1">Descripción *</label>
                <InputTextArea id="descripcion" @bind-Value="NuevoProducto.Descripcion" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500 h-24" />
                <ValidationMessage For="() => NuevoProducto.Descripcion" class="text-red-500 text-sm" />
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <label for="precio" class="block text-sm font-medium text-gray-700 mb-1">Precio Base *</label>
                    <InputNumber id="precio" @bind-Value="NuevoProducto.Precio" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500" />
                    <ValidationMessage For="() => NuevoProducto.Precio" class="text-red-500 text-sm" />
                </div>
                <div>
                    <label for="imagenFile" class="block text-sm font-medium text-gray-700 mb-1">Imagen del Producto *</label>
                    <InputFile id="imagenFile" OnChange="OnImageFileChange" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500" />
                    @if (imagePreviewUrl != null)
                    {
                        <img src="@imagePreviewUrl" class="mt-2 max-h-40 rounded-md shadow" alt="Vista previa de la imagen" />
                    }
                    <ValidationMessage For="() => NuevoProducto.ImagenUrl" class="text-red-500 text-sm" />
                </div>
            </div>

            <div class="flex items-center mb-6">
                <InputCheckbox id="esNovedad" @bind-Value="NuevoProducto.EsNovedad" class="mr-2 h-4 w-4 text-yellow-600 focus:ring-yellow-500 border-gray-300 rounded" />
                <label for="esNovedad" class="text-sm font-medium text-gray-700">Marcar como Novedad</label>
            </div>

            <div class="flex items-center mb-6">
                <InputCheckbox id="tieneVariaciones" @bind-Value="NuevoProducto.TieneVariaciones" class="mr-2 h-4 w-4 text-yellow-600 focus:ring-yellow-500 border-gray-300 rounded" />
                <label for="tieneVariaciones" class="text-sm font-medium text-gray-700">Este producto tiene variaciones (tallas, colores, etc.)</label>
            </div>

            @if (NuevoProducto.TieneVariaciones)
            {
                <h3 class="text-xl font-bold mb-4 text-gray-800">Detalles de Variaciones del Producto</h3>
                @if (NuevoProducto.Variaciones.Count == 0)
                {
                    <p class="text-gray-600 mb-4">Añade al menos una variación para este producto.</p>
                }

                @foreach (var variacion in NuevoProducto.Variaciones)
                {
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 bg-gray-50 p-4 rounded-md mb-4 border border-gray-200">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Tipo Atributo *</label>
                            @if (NuevoProducto.Categoria == "Camisetas" || NuevoProducto.Categoria == "Botines" || NuevoProducto.Categoria == "Guantes")
                            {
                                <InputText @bind-Value="variacion.TipoAtributo" class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100" readonly />
                            }
                            else
                            {
                                <InputText @bind-Value="variacion.TipoAtributo" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Ej: Talla, Color" />
                            }
                            <ValidationMessage For="() => variacion.TipoAtributo" class="text-red-500 text-sm" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Valor Atributo *</label>
                            @switch (NuevoProducto.Categoria)
                            {
                                case "Camisetas":
                                    <InputText @bind-Value="variacion.ValorAtributo" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Ej: S, M, L" list="tallasCamisetas" />
                                    <datalist id="tallasCamisetas">
                                        <option value="XS"></option>
                                        <option value="S"></option>
                                        <option value="M"></option>
                                        <option value="L"></option>
                                        <option value="XL"></option>
                                        <option value="XXL"></option>
                                    </datalist>
                                    break;
                                case "Botines":
                                case "Guantes":
                                    <InputText @bind-Value="variacion.ValorAtributo" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Ej: 8, 9, 10" list="tallasNumericas" />
                                    <datalist id="tallasNumericas">
                                        @for (int i = 6; i <= 12; i++)
                                        {
                                            <option value="@i"></option>
                                        }
                                    </datalist>
                                    break;
                                default:
                                    <InputText @bind-Value="variacion.ValorAtributo" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Ej: Rojo, Grande" />
                                    break;
                            }
                            <ValidationMessage For="() => variacion.ValorAtributo" class="text-red-500 text-sm" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Stock *</label>
                            <InputNumber @bind-Value="variacion.Stock" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                            <ValidationMessage For="() => variacion.Stock" class="text-red-500 text-sm" />
                        </div>
                        <div class="flex items-end">
                            <button type="button" @onclick="() => RemoverVariacion(variacion)" class="w-full bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-300">
                                Eliminar
                            </button>
                        </div>
                    </div>
                }
                <button type="button" @onclick="AñadirVariacion" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-300 mt-2">
                    + Añadir Variación
                </button>
            }

            <div class="mt-8 text-right">
                <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-3 px-8 rounded-lg transition-colors duration-300">
                    Crear Producto
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Producto NuevoProducto { get; set; } = new Producto();
    private string? successMessage;
    private string? errorMessage;
    private IBrowserFile? selectedImageFile;
    private string? imagePreviewUrl;

    protected override void OnInitialized()
    {
        NuevoProducto.Variaciones = new List<ProductoVariacion>();
    }

    private void OnCategoriaChanged(string newCategory)
    {
        NuevoProducto.Categoria = newCategory;
        if (NuevoProducto.TieneVariaciones)
        {
            var tipo = (newCategory == "Camisetas" || newCategory == "Botines" || newCategory == "Guantes") ? "Talla" : string.Empty;
            foreach (var variacion in NuevoProducto.Variaciones)
            {
                variacion.TipoAtributo = tipo;
            }
        }
    }

    private void AñadirVariacion()
    {
        var nuevaVariacion = new ProductoVariacion();
        if (NuevoProducto.Categoria == "Camisetas" || NuevoProducto.Categoria == "Botines" || NuevoProducto.Categoria == "Guantes")
        {
            nuevaVariacion.TipoAtributo = "Talla";
        }
        NuevoProducto.Variaciones.Add(nuevaVariacion);
    }

    private void RemoverVariacion(ProductoVariacion variacion)
    {
        NuevoProducto.Variaciones.Remove(variacion);
    }

    private async Task OnImageFileChange(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;
        if (selectedImageFile != null)
        {
            // Asignamos un valor temporal para pasar la validación [Required] del modelo.
            // La URL final se generará al guardar.
            NuevoProducto.ImagenUrl = selectedImageFile.Name;

            var buffer = new byte[selectedImageFile.Size];
            await selectedImageFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).ReadAsync(buffer); // Limite de 5MB
            imagePreviewUrl = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            NuevoProducto.ImagenUrl = null; // O string.Empty si tu modelo no permite nulos.
            imagePreviewUrl = null;
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;

        try
        {
            if (NuevoProducto.TieneVariaciones && (!NuevoProducto.Variaciones?.Any() ?? true))
            {
                errorMessage = "Si el producto tiene variaciones, debe añadir al menos una.";
                return;
            }

            if (!NuevoProducto.TieneVariaciones)
            {
                NuevoProducto.Variaciones.Clear();
            }

            if (selectedImageFile != null)
            {
                var uploadsFolder = Path.Combine(WebHostEnvironment.WebRootPath, "images", NuevoProducto.Categoria.ToLowerInvariant());
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                var uniqueFileName = Guid.NewGuid().ToString() + "_" + selectedImageFile.Name;
                var filePath = Path.Combine(uploadsFolder, uniqueFileName);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await selectedImageFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(stream);
                }

                // Esta es la URL final y correcta que se guardará en la BD
                NuevoProducto.ImagenUrl = $"/images/{NuevoProducto.Categoria.ToLowerInvariant()}/{uniqueFileName}";
            }
            // La validación [Required] en ImagenUrl ya habrá prevenido el envío si no se seleccionó un archivo.

            DbContext.Productos.Add(NuevoProducto);
            await DbContext.SaveChangesAsync();

            successMessage = $"Producto '{NuevoProducto.Nombre}' creado exitosamente.";
            Logger.LogInformation("Producto creado: {ProductoNombre}", NuevoProducto.Nombre);

            // Resetear el formulario
            NuevoProducto = new Producto();
            NuevoProducto.Variaciones = new List<ProductoVariacion>();
            selectedImageFile = null;
            imagePreviewUrl = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al crear el producto: {ex.Message}";
            Logger.LogError(ex, "Error al crear producto.");
        }
    }
}