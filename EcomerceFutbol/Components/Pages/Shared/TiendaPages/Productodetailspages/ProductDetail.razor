@page "/productos/{id:int}"
@using Proyecto_Final.Components.Pages.Shared.TiendaPages.Carrito
@using Proyecto_Final.Data
@using Proyecto_Final.Models.Producto
@using Proyecto_Final.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Proyecto_Final.Models.Usuario
@using System.Linq
@using System.Security.Claims
@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http

@inject ApplicationDbContext DbContext
@inject ICarritoService CarritoService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProductoService ProductoService
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<ProductDetail> Logger

<PageTitle>Detalle del Producto</PageTitle>

@if (isLoading)
{
    <div class="min-h-screen bg-gray-50 flex items-center justify-center">
        <div class="text-center">
            <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
            <p class="mt-4 text-gray-600">Cargando detalles del producto...</p>
        </div>
    </div>
}
else if (producto == null)
{
    <div class="min-h-screen bg-gray-50 flex items-center justify-center">
        <div class="text-center max-w-md mx-auto px-4">
            <h1 class="text-3xl font-bold text-gray-900 mb-4">Producto no encontrado</h1>
            <p class="text-gray-600 mb-8">Lo sentimos, el producto que busca no existe o ha sido eliminado.</p>
            <NavLink href="/productos" class="inline-flex items-center px-6 py-3 bg-black text-white font-medium rounded-lg hover:bg-gray-800 transition-colors">
                Volver a productos
            </NavLink>
        </div>
    </div>
}
else
{
    <div class="min-h-screen bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
                <div class="space-y-4">
                    <div class="aspect-square bg-white rounded-2xl overflow-hidden">
                        <img src="@(producto.ImagenUrl ?? "https://placehold.co/600x600/F5F5F5/9CA3AF?text=Sin+imagen")"
                             alt="@producto.Nombre"
                             class="w-full h-full object-contain" />
                    </div>
                </div>

                <div class="space-y-8">
                    <div>
                        <h1 class="text-4xl font-bold text-gray-900 mb-4">@producto.Nombre</h1>

                        @if (!string.IsNullOrEmpty(producto.Descripcion))
                        {
                            <div class="mb-4">
                                <button @onclick="ToggleDescripcion" class="flex items-center justify-between w-full text-left">
                                    <h3 class="text-lg font-semibold text-gray-900">Descripción</h3>
                                    <svg class="w-5 h-5 text-gray-500 transform @(mostrarDescripcion ? "rotate-180" : "")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </button>
                                @if (mostrarDescripcion)
                                {
                                    <div class="mt-3 text-gray-600 leading-relaxed">
                                        @((MarkupString)producto.Descripcion)
                                    </div>
                                }
                            </div>
                        }

                        <div class="flex items-baseline space-x-4 mb-6">
                            <span class="text-3xl font-medium text-gray-900">
                                @((producto.Precio * (1 - producto.Descuento)).ToString("C"))
                            </span>
                            @if (producto.Descuento > 0m)
                            {
                                <span class="text-xl text-gray-500 line-through">@producto.Precio.ToString("C")</span>
                                <span class="bg-red-100 text-red-800 text-sm font-semibold px-3 py-1 rounded-full">
                                    -@((producto.Descuento * 100).ToString("F0"))%
                                </span>
                            }
                        </div>

                        <div class="flex items-center space-x-2 mb-6">
                            <div class="flex text-yellow-400">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <svg class="w-5 h-5 @(i <= Math.Round(valoraciones.Any() ? valoraciones.Average(v => v.Puntuacion) : 0) ? "fill-current" : "fill-gray-300")" viewBox="0 0 20 20">
                                        <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z" />
                                    </svg>
                                }
                            </div>
                            <span class="text-sm text-gray-600">(@valoraciones.Count reseñas)</span>
                        </div>
                    </div>

                    @if (producto.Variaciones != null && producto.Variaciones.Any())
                    {
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-3">Talla:</h3>
                                <div class="flex flex-wrap gap-3">
                                    @foreach (var variacion in producto.Variaciones)
                                    {
                                        <button @onclick="() => SelectVariacion(variacion.Id)"
                                                class="@(selectedVariacionId == variacion.Id ? "bg-black text-white border-black" : "bg-white text-gray-900 border-gray-300 hover:border-gray-400")
                                                                                           px-6 py-3 border-2 rounded-lg font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black">
                                            @variacion.ValorAtributo
                                        </button>
                                    }
                                </div>
                                @if (selectedVariacion != null)
                                {
                                    <p class="text-sm text-gray-600 mt-2">
                                        @selectedVariacion.Stock disponibles
                                        @if (selectedVariacion.PrecioAdicional.HasValue && selectedVariacion.PrecioAdicional.Value != 0)
                                        {
                                            <span class="ml-2 font-medium">(+@selectedVariacion.PrecioAdicional.Value.ToString("C"))</span>
                                        }
                                    </p>
                                }
                            </div>

                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-3">Cantidad:</h3>
                                <div class="flex items-center space-x-4">
                                    <div class="flex items-center border border-gray-300 rounded-lg">
                                        <button @onclick="DecrementarCantidad"
                                                class="px-4 py-2 text-gray-600 hover:text-gray-800 focus:outline-none"
                                                disabled="@(cantidad <= 1)">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                                            </svg>
                                        </button>
                                        <span class="px-4 py-2 text-center font-medium min-w-[3rem]">@cantidad</span>
                                        <button @onclick="IncrementarCantidad"
                                                class="px-4 py-2 text-gray-600 hover:text-gray-800 focus:outline-none"
                                                disabled="@(cantidad >= (selectedVariacion?.Stock ?? 1))">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                            </svg>
                                        </button>
                                    </div>
                                    @if (!stockSuficiente)
                                    {
                                        <span class="text-red-600 text-sm font-medium">Stock insuficiente</span>
                                    }
                                </div>
                            </div>

                            <div class="pt-4">
                                <button @onclick="AgregarAlCarrito"
                                        class="w-full bg-black text-white font-semibold py-4 px-8 rounded-xl hover:bg-gray-800 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-black"
                                        disabled="@(!stockSuficiente || selectedVariacion == null)">
                                    Añadir a la cesta
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="bg-gray-100 border border-gray-200 rounded-xl p-6">
                            <p class="text-gray-700 font-medium">Este producto no tiene variaciones disponibles en este momento.</p>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(mensajeCarrito))
                    {
                        <div class="@(mensajeCarrito.Contains("éxito") ? "bg-green-50 border-green-200 text-green-800" : "bg-red-50 border-red-200 text-red-800") border rounded-xl p-4">
                            <div class="flex items-center">
                                @if (mensajeCarrito.Contains("éxito"))
                                {
                                    <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                    </svg>
                                }
                                else
                                {
                                    <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                }
                                <span class="font-medium">@mensajeCarrito</span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (productosRecomendados != null && productosRecomendados.Any())
            {
                <div class="mt-16">
                    <h2 class="text-3xl font-bold text-gray-900 mb-6">Productos que te podrían interesar</h2>
                    <div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                        @foreach (var prod in productosRecomendados)
                        {
                            <NavLink href="@($"/productos/{prod.Id}")" class="block bg-white rounded-2xl shadow-sm hover:shadow-lg transition-shadow duration-200 overflow-hidden">
                                <div class="aspect-square">
                                    <img src="@(prod.ImagenUrl ?? "https://placehold.co/400x400/F5F5F5/9CA3AF?text=Sin+imagen")"
                                         alt="@prod.Nombre"
                                         class="w-full h-full object-contain p-4" />
                                </div>
                                <div class="p-4 border-t border-gray-100">
                                    <h3 class="text-lg font-semibold text-gray-900 truncate">@prod.Nombre</h3>
                                    <p class="mt-1 text-sm text-gray-600 truncate">
                                        @prod.Descripcion
                                    </p>
                                    <div class="mt-2 flex items-baseline space-x-2">
                                        <span class="text-base font-medium text-gray-900">
                                            @((prod.Precio * (1 - prod.Descuento)).ToString("C"))
                                        </span>
                                        @if (prod.Descuento > 0m)
                                        {
                                            <span class="text-sm text-gray-500 line-through">@prod.Precio.ToString("C")</span>
                                        }
                                    </div>
                                </div>
                            </NavLink>
                        }
                    </div>
                </div>
            }

            <div class="mt-16">
                <div class="reviews-section">
                    <h2 class="text-3xl font-bold text-gray-900 mb-8">Reseñas de clientes</h2>

                    @if (valoraciones != null && valoraciones.Any())
                    {
                        <div class="bg-white rounded-2xl shadow-lg p-8 mb-8 overflow-x-auto">
                            <div class="flex space-x-6">
                                @foreach (var valoracion in valoraciones.OrderByDescending(v => v.FechaCreacion))
                                {
                                    <div class="border border-gray-100 rounded-xl p-6 min-w-[300px] flex-shrink-0">
                                        <div class="flex items-center justify-between mb-3">
                                            <div class="flex items-center space-x-3">
                                                <div class="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                                                    <i class="fas fa-user text-gray-600"></i>
                                                </div>
                                                <div>
                                                    <p class="font-semibold text-gray-900">
                                                        @if (valoracion.Usuario != null)
                                                        {
                                                            @($"{valoracion.Usuario.Nombre} {valoracion.Usuario.Apellido}")
                                                        }
                                                        else
                                                        {
                                                            <span class="text-gray-500">Usuario Anónimo</span>
                                                        }
                                                    </p>
                                                    <p class="text-sm text-gray-500">@valoracion.FechaCreacion.ToString("dd/MM/yyyy")</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex text-yellow-400 mb-3">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <svg class="w-5 h-5 @(i <= valoracion.Puntuacion ? "fill-current" : "fill-gray-300")" viewBox="0 0 20 20">
                                                    <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z" />
                                                </svg>
                                            }
                                        </div>
                                        <p class="text-gray-700 leading-relaxed">@valoracion.Comentario</p>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="bg-white rounded-2xl shadow-lg p-8 mb-8 text-center">
                            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <i class="fas fa-star text-gray-400 text-2xl"></i>
                            </div>
                            <p class="text-gray-600 text-lg">No hay reseñas para este producto.</p>
                            <p class="text-gray-500 text-sm mt-2">¡Sé el primero en compartir tu opinión!</p>
                        </div>
                    }
                </div>

                @if (currentUser != null)
                {
                    <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
                        <div class="bg-gradient-to-r from-gray-800 to-black p-6 flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-12 h-12 bg-yellow-500 rounded-full flex items-center justify-center">
                                    <i class="fas fa-pen text-black text-lg"></i>
                                </div>
                                <div>
                                    <h3 class="text-2xl font-bold text-white">Comparte tu experiencia</h3>
                                    <p class="text-gray-300">Ayuda a otros clientes con tu opinión</p>
                                </div>
                            </div>
                            <button @onclick="ToggleReviewForm"
                                    class="px-6 py-3 bg-white text-black font-semibold rounded-lg hover:bg-gray-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white">
                                @if (showReviewForm)
                                {
                                    <span>Ocultar formulario</span>
                                }
                                else
                                {
                                    <span>Agregar Reseña</span>
                                }
                            </button>
                        </div>

                        @if (showReviewForm)
                        {
                            <div class="p-8">
                                <EditForm Model="nuevaValoracion" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    <div class="space-y-6">
                                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div class="space-y-2">
                                                <label for="nombre" class="flex items-center text-sm font-semibold text-gray-700">
                                                    Nombre
                                                </label>
                                                <InputText id="nombre"
                                                           @bind-Value="nuevaValoracion.Nombre"
                                                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-300 hover:border-gray-400" />
                                                <ValidationMessage For="@(() => nuevaValoracion.Nombre)" class="text-red-500 text-sm flex items-center mt-1" />
                                            </div>
                                            <div class="space-y-2">
                                                <label for="apellido" class="flex items-center text-sm font-semibold text-gray-700">
                                                    Apellido
                                                </label>
                                                <InputText id="apellido"
                                                           @bind-Value="nuevaValoracion.Apellido"
                                                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-300 hover:border-gray-400" />
                                                <ValidationMessage For="@(() => nuevaValoracion.Apellido)" class="text-red-500 text-sm flex items-center mt-1" />
                                            </div>
                                        </div>

                                        <div class="space-y-2">
                                            <label for="correo" class="flex items-center text-sm font-semibold text-gray-700">
                                                Correo Electrónico
                                            </label>
                                            <InputText id="correo"
                                                       @bind-Value="nuevaValoracion.CorreoElectronico"
                                                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-300 hover:border-gray-400" />
                                            <ValidationMessage For="@(() => nuevaValoracion.CorreoElectronico)" class="text-red-500 text-sm flex items-center mt-1" />
                                        </div>

                                        <div class="space-y-2">
                                            <label class="flex items-center text-sm font-semibold text-gray-700">
                                                <i class="fas fa-star mr-2 text-gray-500"></i>
                                                Puntuación
                                            </label>
                                            <div class="flex items-center space-x-2">
                                                <div class="flex items-center space-x-1">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        int starValue = i;
                                                        <button type="button"
                                                                @onclick="() => SetRating(starValue)"
                                                                class="@(nuevaValoracion.Puntuacion >= starValue ? "text-yellow-400" : "text-gray-300")
                                                                                                                    hover:text-yellow-400 transition-colors focus:outline-none transform hover:scale-110 duration-200">
                                                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z" />
                                                            </svg>
                                                        </button>
                                                    }
                                                </div>
                                                @if (nuevaValoracion.Puntuacion > 0)
                                                {
                                                    <span class="text-sm text-gray-600 ml-3 font-medium">
                                                        @(nuevaValoracion.Puntuacion) de 5 estrellas
                                                    </span>
                                                }
                                            </div>
                                            <ValidationMessage For="@(() => nuevaValoracion.Puntuacion)" class="text-red-500 text-sm flex items-center mt-1">
                                                <i class="fas fa-exclamation-circle mr-1"></i>
                                            </ValidationMessage>
                                        </div>

                                        <div class="space-y-2">
                                            <label for="comentario" class="flex items-center text-sm font-semibold text-gray-700">
                                                <i class="fas fa-comment mr-2 text-gray-500"></i>
                                                Tu reseña
                                            </label>
                                            <InputTextArea id="comentario"
                                                           @bind-Value="nuevaValoracion.Comentario"
                                                           rows="4"
                                                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-300 resize-none hover:border-gray-400"
                                                           placeholder="Comparte tu experiencia con este producto. ¿Qué te pareció la calidad, el ajuste, el diseño?" />
                                            <ValidationMessage For="@(() => nuevaValoracion.Comentario)" class="text-red-500 text-sm flex items-center mt-1">
                                                <i class="fas fa-exclamation-circle mr-1"></i>
                                            </ValidationMessage>
                                        </div>

                                        @if (!string.IsNullOrEmpty(reviewMessage))
                                        {
                                            <div class="@(reviewMessage.Contains("éxito") ? "bg-green-50 border-green-200 text-green-700" : "bg-red-50 border-red-200 text-red-700") border rounded-xl p-4">
                                                <div class="flex items-center">
                                                    @if (reviewMessage.Contains("éxito"))
                                                    {
                                                        <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3">
                                                            <i class="fas fa-check text-green-600"></i>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center mr-3">
                                                            <i class="fas fa-exclamation-triangle text-red-600"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <p class="font-semibold">@reviewMessage</p>
                                                        @if (reviewMessage.Contains("éxito"))
                                                        {
                                                            <p class="text-sm text-green-600 mt-1">¡Gracias por tu opinión! Tu reseña aparecerá arriba.</p>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        <div class="flex justify-end space-x-4 pt-6 border-t border-gray-100">
                                            <button type="button"
                                                    @onclick="ResetForm"
                                                    class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg font-semibold hover:bg-gray-50 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
                                                <i class="fas fa-undo mr-2"></i>
                                                Limpiar
                                            </button>
                                            <button type="submit"
                                                    disabled="@isSubmittingReview"
                                                    class="px-8 py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 disabled:from-gray-400 disabled:to-gray-500 text-black font-bold rounded-lg transition-all duration-300 transform hover:scale-105 disabled:transform-none focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 disabled:cursor-not-allowed shadow-lg">
                                                @if (isSubmittingReview)
                                                {
                                                    <i class="fas fa-spinner fa-spin mr-2"></i>
                                                    <span>Enviando...</span>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-paper-plane mr-2"></i>
                                                    <span>Publicar Reseña</span>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                </EditForm>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="bg-white rounded-2xl shadow-xl overflow-hidden text-center p-8">
                        <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-user-lock text-gray-400 text-2xl"></i>
                        </div>
                        <p class="text-xl font-semibold text-gray-700">Inicia sesión para dejar una reseña</p>
                        <p class="text-gray-500 mt-2 mb-4">Solo los usuarios registrados pueden dejar valoraciones y comentarios.</p>
                        <NavLink href="/Account/Login" class="inline-block px-6 py-3 bg-black text-white font-medium rounded-lg hover:bg-gray-800 transition-colors">
                            Iniciar Sesión
                        </NavLink>
                    </div>
                }
            </div>
        </div>
    </div>
}


<CartModal @ref="cartModalRef" />


@code {
    [Parameter]
    public int Id { get; set; }
    private CartModal? cartModalRef;
    private Producto? producto;
    private List<Producto> productosRecomendados = new List<Producto>();
    private int selectedVariacionId;
    private int cantidad = 1;
    private string mensajeCarrito = "";
    private bool stockSuficiente = true;
    private bool isLoading = true;
    private bool mostrarDescripcion = false;

    // Propiedades para la funcionalidad de reseñas
    private List<Valoracion> valoraciones = new List<Valoracion>();
    private Valoracion nuevaValoracion = new Valoracion();
    private string reviewMessage = "";
    private bool isSubmittingReview = false;
    private ApplicationUser? currentUser;
    private bool showReviewForm = false; // Nueva propiedad para controlar la visibilidad del formulario

    // Propiedades para la funcionalidad de carrito de invitado
    private string? usuarioId;
    private string? sessionId;
    private bool isLoggedIn = false;

    private ProductoVariacion? selectedVariacion =>
        producto?.Variaciones?.FirstOrDefault(v => v.Id == selectedVariacionId);

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        mensajeCarrito = "";
        cantidad = 1;
        selectedVariacionId = 0;
        producto = null;
        productosRecomendados = new List<Producto>();
        mostrarDescripcion = false;
        // Resetear las propiedades de reseñas
        valoraciones = new List<Valoracion>();
        nuevaValoracion = new Valoracion();
        reviewMessage = "";
        isSubmittingReview = false;
        showReviewForm = false; // Resetear el estado del formulario

        await LoadProductAsync();
        await GetCurrentUserAsync();
        await LoadCartIdentifiers();

        if (producto != null)
        {
            if (producto.Variaciones != null && producto.Variaciones.Any())
            {
                selectedVariacionId = producto.Variaciones.First().Id;
                CheckStock();
            }
            else
            {
                stockSuficiente = false;
            }

            // Cargar valoraciones
            valoraciones = producto.Valoraciones?.ToList() ?? new List<Valoracion>();
            await LoadRecommendedProductsAsync();
        }

        isLoading = false;
    }

    private async Task LoadProductAsync()
    {
        try
        {
            producto = await ProductoService.ObtenerProductoPorId(Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar el producto: {ProductId}", Id);
            producto = null;
        }
    }

    private async Task GetCurrentUserAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
                currentUser = await UserManager.FindByIdAsync(userId!);

                // Establecer los valores predeterminados para el formulario si el usuario está autenticado
                nuevaValoracion.Nombre = currentUser?.Nombre;
                nuevaValoracion.Apellido = currentUser?.Apellido;
                nuevaValoracion.CorreoElectronico = currentUser?.Email;
                nuevaValoracion.UsuarioId = currentUser?.Id;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar el usuario actual.");
            currentUser = null;
        }
    }

    private async Task LoadCartIdentifiers()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isLoggedIn = user.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            usuarioId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            sessionId = null;
        }
        else
        {
            usuarioId = null;
            var httpContext = HttpContextAccessor.HttpContext;
            sessionId = httpContext?.Session.Id;

            if (string.IsNullOrEmpty(sessionId) && httpContext != null)
            {
                httpContext.Session.SetString("SessionId", Guid.NewGuid().ToString());
                sessionId = httpContext.Session.Id;
            }
        }
    }

    private async Task LoadRecommendedProductsAsync()
    {
        try
        {
            productosRecomendados = await ProductoService.ObtenerProductosRelacionados(Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar productos recomendados para el producto {ProductId}", Id);
        }
    }

    private void SelectVariacion(int variacionId)
    {
        selectedVariacionId = variacionId;
        cantidad = 1;
        CheckStock();
        mensajeCarrito = "";
    }

    private void IncrementarCantidad()
    {
        if (selectedVariacion != null && cantidad < selectedVariacion.Stock)
        {
            cantidad++;
            CheckStock();
        }
    }

    private void DecrementarCantidad()
    {
        if (cantidad > 1)
        {
            cantidad--;
            CheckStock();
        }
    }

    private void CheckStock()
    {
        if (selectedVariacion != null)
        {
            stockSuficiente = cantidad <= selectedVariacion.Stock;
        }
        else
        {
            stockSuficiente = false;
        }
    }

    private void ToggleDescripcion()
    {
        mostrarDescripcion = !mostrarDescripcion;
    }

    private async Task AgregarAlCarrito()
    {
        mensajeCarrito = "";
        CheckStock();

        if (!stockSuficiente)
        {
            mensajeCarrito = "Error: La cantidad solicitada supera el stock disponible.";
            return;
        }

        if (selectedVariacionId == 0)
        {
            mensajeCarrito = "Por favor, seleccione una variación de producto válida.";
            return;
        }

        // Se corrigió para usar los identificadores de usuario/sesión
        // cargados previamente.
        try
        {
            await CarritoService.AgregarOActualizarItemAsync(usuarioId, sessionId, selectedVariacionId, cantidad);
            mensajeCarrito = "Producto agregado con éxito al carrito.";

            if (cartModalRef != null)
            {
                await cartModalRef.ShowModal();
            }
        }
        catch (Exception ex)
        {
            mensajeCarrito = $"Ocurrió un error al agregar el producto: {ex.Message}";
        }
    }

    private void SetRating(int rating)
    {
        nuevaValoracion.Puntuacion = rating;
    }

    private void ResetForm()
    {
        nuevaValoracion = new Valoracion();
        if (currentUser != null)
        {
            nuevaValoracion.Nombre = currentUser.Nombre;
            nuevaValoracion.Apellido = currentUser.Apellido;
            nuevaValoracion.CorreoElectronico = currentUser.Email;
            nuevaValoracion.UsuarioId = currentUser.Id;
        }
        reviewMessage = "";
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        isSubmittingReview = true;
        reviewMessage = "";
        StateHasChanged();

        if (currentUser == null)
        {
            reviewMessage = "Debe iniciar sesión para dejar una reseña.";
            isSubmittingReview = false;
            StateHasChanged();
            return;
        }

        try
        {
            // Asignar el ID de producto, la fecha de creación y el ID de usuario
            nuevaValoracion.ProductoId = producto!.Id;
            nuevaValoracion.FechaCreacion = DateTime.UtcNow;
            nuevaValoracion.UsuarioId = currentUser.Id;

            // Guardar la valoración
            await ProductoService.AgregarValoracion(nuevaValoracion);
            // Recargar los datos del producto y las valoraciones desde la base de datos
            producto = await ProductoService.ObtenerProductoPorId(Id);
            if (producto != null)
            {
                valoraciones = producto.Valoraciones?.ToList() ?? new List<Valoracion>();
            }

            reviewMessage = "¡Reseña enviada con éxito!";
            // Limpiar el formulario después del éxito
            await Task.Delay(2000);
            ResetForm();
        }
        catch (Exception ex)
        {
            reviewMessage = $"Ocurrió un error al enviar la reseña: {ex.Message}";
            Logger.LogError(ex, "Error al enviar la reseña.");
        }
        finally
        {
            isSubmittingReview = false;
            StateHasChanged(); // Forzar la actualización del componente
        }
    }

    private void ToggleReviewForm()
    {
        showReviewForm = !showReviewForm;
    }
}