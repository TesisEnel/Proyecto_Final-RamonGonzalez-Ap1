@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Proyecto_Final.Components.Account
@using Proyecto_Final.Models.Usuario
@using Proyecto_Final.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión - Golazo Store</PageTitle>

<div class="container mx-auto px-4 py-12">
    <div class="max-w-md mx-auto bg-white p-8 rounded-xl shadow-md border border-gray-200">
        <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">Iniciar sesión</h2>

        <div class="text-red-500">
            <StatusMessage Message="@errorMessage" />
        </div>

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <div class="mb-4">
                <label class="block text-sm font-medium mb-1">Correo electrónico *</label>
                <InputText @bind-Value="Input.Email" class="w-full px-4 py-2 border rounded-lg" autocomplete="username" aria-required="true" placeholder="nombre@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-red-500 text-sm" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium mb-1">Contraseña *</label>
                <InputText type="password" @bind-Value="Input.Password" class="w-full px-4 py-2 border rounded-lg" autocomplete="current-password" aria-required="true" placeholder="contraseña" />
                <ValidationMessage For="() => Input.Password" class="text-red-500 text-sm" />
            </div>

            <div class="flex justify-between items-center mb-6">
                <div class="checkbox">
                    <label class="form-label text-sm font-medium text-gray-700">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input mr-2" />
                        Recordarme
                    </label>
                </div>
                <a href="Account/ForgotPassword" class="text-sm text-yellow-600 hover:underline">¿Olvidaste tu contraseña?</a>
            </div>

            <button type="submit" class="w-full bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-2 px-4 rounded-lg">
                Iniciar Sesión
            </button>
        </EditForm>

        <div class="mt-6 text-center">
            <p class="text-sm text-gray-600">
                <a href="/Account/Register" class="text-yellow-600 hover:underline">¿No tienes una cuenta? Regístrate aquí.</a>
            </p>
            <p class="text-sm text-gray-600 mt-2">
                <a href="Account/ResendEmailConfirmation" class="text-yellow-600 hover:underline">Reenviar confirmación de correo</a>
            </p>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Correo o contraseña incorrectos.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo electrónico es obligatorio.")]
        [EmailAddress(ErrorMessage = "Formato de correo electrónico inválido.")]
        public string Email { get; set; } = "";
        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        [Display(Name = "¿Recordarme?")]
        public bool RememberMe { get; set; }
    }
}